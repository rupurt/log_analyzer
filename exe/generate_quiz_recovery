#!/usr/bin/env ruby

require "bundler/setup"
require "fileutils"
require "json"
require "time"

class GenerateQuizRecovery
  QUIZ_RECOVERY_PATH = File.expand_path("../../quiz_recovery", __FILE__)
  QUIZ_RECOVERY_DATA_PATH = File.expand_path("../../quiz_recovery/data", __FILE__)
  QUIZ_RECOVERY_MATCH_PATH = File.expand_path("../../quiz_recovery/match", __FILE__)
  QUIZ_RECOVERY_INSERT_PATH = File.expand_path("../../quiz_recovery/insert", __FILE__)

  def run!
    cleanup!
    ensure_dir_structure!

    generate_insert_quiz_attempts_with_learner!
    generate_insert_quiz_attempts_with_course_attempt!
  end

  private

  def cleanup!
    FileUtils.rm_rf(QUIZ_RECOVERY_INSERT_PATH)
  end

  def ensure_dir_structure!
    FileUtils.mkdir_p(QUIZ_RECOVERY_PATH)
    FileUtils.mkdir_p(QUIZ_RECOVERY_DATA_PATH)
    FileUtils.mkdir_p(QUIZ_RECOVERY_MATCH_PATH)
    FileUtils.mkdir_p(QUIZ_RECOVERY_INSERT_PATH)
  end

  def ensure_match_attempt_dir!(attempt_id)
    FileUtils.mkdir_p("#{QUIZ_RECOVERY_MATCH_PATH}/#{attempt_id}")
  end

  def matched_insert_quiz_attempts_with_learner
    Dir.glob("#{QUIZ_RECOVERY_MATCH_PATH}/**/insert_quiz_attempt_with_learner.log")
  end

  def generate_insert_quiz_attempts_with_learner!
    matched_insert_quiz_attempts_with_learner.each do |path|
      path_segments = path.split("/")
      file = path_segments.pop
      attempt_id = path_segments.pop

      $stderr.puts "generating insert statements for attempt with learner: #{attempt_id}..."

      log_line = `head -n 1 #{path}`

      activity_id = log_line.match(/"activity_id", (\d+)/)[1].to_i
      learner_id = log_line.match(/"learner_id", (\d+)/)[1].to_i
      quiz_id = log_line.match(/"quiz_id", (\d+)/)[1].to_i
      created_at = log_line.match(/"created_at", ([\d\w\s:\+,]+)/)[1]
      updated_at = log_line.match(/"updated_at", ([\d\w\s:\+,]+)/)[1]

      insert_attempt_with_id_sql = <<-SQL
        INSERT INTO "quiz_attempts"
        ("id", "activity_id", "learner_id", "quiz_id", "created_at", "updated_at")
        VALUES
        (#{attempt_id}, #{activity_id}, #{learner_id}, #{quiz_id}, '#{created_at}', '#{updated_at}');
      SQL

      FileUtils.mkdir_p("#{QUIZ_RECOVERY_INSERT_PATH}/#{attempt_id}")
      File.open("#{QUIZ_RECOVERY_INSERT_PATH}/#{attempt_id}/insert.sql", "w") do |insert_file|
        insert_file.puts insert_attempt_with_id_sql

        File.open("#{QUIZ_RECOVERY_DATA_PATH}/#{attempt_id}/learner_answers.sql") do |learner_answers_file|
          learner_answers_file.each do |line|
            insert_file.puts line
          end
        end
      end
    end
  end

  def matched_insert_quiz_attempts_with_course_attempt
    Dir.glob("#{QUIZ_RECOVERY_MATCH_PATH}/**/insert_quiz_attempt_with_course_attempt.log")
  end
  
  def generate_insert_quiz_attempts_with_course_attempt!
    matched_insert_quiz_attempts_with_course_attempt.each do |path|
      path_segments = path.split("/")
      file = path_segments.pop
      attempt_id = path_segments.pop

      $stderr.puts "generating insert statements for attempt with course_attempt: #{attempt_id}..."

      log_line = `head -n 1 #{path}`

      activity_id = log_line.match(/"activity_id", (\d+)/)[1].to_i
      course_attempt_id = log_line.match(/"course_attempt_id", (\d+)/)[1].to_i
      quiz_id = log_line.match(/"quiz_id", (\d+)/)[1].to_i
      created_at = log_line.match(/"created_at", ([\d\w\s:\+,]+)/)[1]
      updated_at = log_line.match(/"updated_at", ([\d\w\s:\+,]+)/)[1]

      insert_attempt_with_id_sql = <<-SQL
        INSERT INTO "quiz_attempts"
        ("id", "activity_id", "course_attempt_id", "quiz_id", "created_at", "updated_at")
        VALUES
        (#{attempt_id}, #{activity_id}, #{course_attempt_id}, #{quiz_id}, '#{created_at}', '#{updated_at}');
      SQL

      FileUtils.mkdir_p("#{QUIZ_RECOVERY_INSERT_PATH}/#{attempt_id}")
      File.open("#{QUIZ_RECOVERY_INSERT_PATH}/#{attempt_id}/insert.sql", "w") do |insert_file|
        insert_file.puts insert_attempt_with_id_sql

        File.open("#{QUIZ_RECOVERY_DATA_PATH}/#{attempt_id}/learner_answers.sql") do |learner_answers_file|
          learner_answers_file.each do |line|
            insert_file.puts line
          end
        end
      end
    end
  end
end

GenerateQuizRecovery.new.run!
