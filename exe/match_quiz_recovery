#!/usr/bin/env ruby

require "bundler/setup"
require "fileutils"
require "json"
require "time"
require "active_support/core_ext/string"

class MatchQuizRecovery
  QUIZ_RECOVERY_PATH = File.expand_path("../../quiz_recovery", __FILE__)
  QUIZ_RECOVERY_DATA_PATH = File.expand_path("../../quiz_recovery/data", __FILE__)
  QUIZ_RECOVERY_MATCH_PATH = File.expand_path("../../quiz_recovery/match", __FILE__)

  def run!
    cleanup!
    ensure_dir_structure!

    attempt_ids.each do |attempt_id|
      $stderr.puts "matching attempt: #{attempt_id}..."

      answer_line = learner_answer_log_line(attempt_id, 1)
      tab_segments = answer_line.split("\t")
      timestamp = tab_segments[1]
      ip = tab_segments[5]
      dyno = tab_segments[8]
      sql = tab_segments[9]

      ensure_match_attempt_dir!(attempt_id)
      match_first_select_quiz_attempt_log_line(attempt_id, timestamp, ip, dyno)

      activity_id, learner_id, quiz_id = extract_select_quiz_attempt_params(attempt_id, timestamp, ip, dyno)

    end
  end

  private

  def cleanup!
    FileUtils.rm_rf(QUIZ_RECOVERY_MATCH_PATH)
  end

  def ensure_dir_structure!
    FileUtils.mkdir_p(QUIZ_RECOVERY_PATH)
    FileUtils.mkdir_p(QUIZ_RECOVERY_DATA_PATH)
    FileUtils.mkdir_p(QUIZ_RECOVERY_MATCH_PATH)
  end

  def ensure_match_attempt_dir!(attempt_id)
    FileUtils.mkdir_p("#{QUIZ_RECOVERY_MATCH_PATH}/#{attempt_id}")
  end

  def attempt_ids
    Dir.entries(QUIZ_RECOVERY_DATA_PATH).map(&:to_i).select { |id| id > 0 }
  end

  def match_learner_id_insert_quiz_attempt_log_line!(attempt_id, activity_id, learner_id, quiz_id)
    commands = [
      "cat quiz_recovery/data/insert_quiz_attempts.log",
      %Q{grep '\\["activity_id", #{activity_id}\\], \\["learner_id", #{learner_id}\], \\["quiz_id", #{quiz_id}\\]'}
    ]

    insert_log = `#{commands.join(" | ")}`

    if insert_log.present?
      File.open("#{QUIZ_RECOVERY_MATCH_PATH}/#{attempt_id}/insert_quiz_attempt_with_learner.log", "w") do |f|
        f.puts insert_log
      end
    end
  end

  def match_course_attempt_id_insert_quiz_attempt_log_line!(attempt_id, activity_id, course_attempt_id, quiz_id)
    commands = [
      "cat quiz_recovery/data/insert_quiz_attempts.log",
      %Q{grep '\\["activity_id", #{activity_id}\\], \\["course_attempt_id", #{course_attempt_id}\], \\["quiz_id", #{quiz_id}\\]'}
    ]

    insert_log = `#{commands.join(" | ")}`

    if insert_log.present?
      File.open("#{QUIZ_RECOVERY_MATCH_PATH}/#{attempt_id}/insert_quiz_attempt_with_course_attempt.log", "w") do |f|
        f.puts insert_log
      end
    end
  end

  def learner_answer_log_line(attempt_id, row)
    `sed -n #{row},#{row}p #{QUIZ_RECOVERY_DATA_PATH}/#{attempt_id}/learner_answers.log`
  end

  def match_first_select_quiz_attempt_log_line(attempt_id, timestamp, ip, dyno)
    commands = [
      "cat #{QUIZ_RECOVERY_DATA_PATH}/select_quiz_attempts.log",
      "grep '#{timestamp}.*#{ip}.*#{dyno}'",
      "head -n 1 > #{QUIZ_RECOVERY_MATCH_PATH}/#{attempt_id}/select_quiz_attempt.log"
    ]

    `#{commands.join(" | ")}`
  end

  def extract_select_quiz_attempt_params(attempt_id, timestamp, ip, dyno)
    params = {
      timestamp: Time.parse(timestamp),
      ip: ip,
      dyno: dyno
    }

    tab_segments = File.read("#{QUIZ_RECOVERY_MATCH_PATH}/#{attempt_id}/select_quiz_attempt.log").split("\t")
    sql = tab_segments[9]

    if sql
      params[:activity_id] = sql.match(/"activity_id" = (\d+)/)[1].to_i
      params[:quiz_id] = sql.match(/"quiz_id" = (\d+)/)[1].to_i
      if learner_id_match = sql.match(/"learner_id" = (\d+)/)
        params[:learner_id] = learner_id_match[1].to_i
        match_learner_id_insert_quiz_attempt_log_line!(attempt_id, params[:activity_id], params[:learner_id], params[:quiz_id])
      elsif course_attempt_id_match = sql.match(/"course_attempt_id" = (\d+)/)
        params[:course_attempt_id] = course_attempt_id_match[1].to_i
        match_course_attempt_id_insert_quiz_attempt_log_line!(attempt_id, params[:activity_id], params[:course_attempt_id], params[:quiz_id])
      end

      File.open("#{QUIZ_RECOVERY_MATCH_PATH}/#{attempt_id}/select_quiz_attempt.json", "w") do |file|
        file.puts params.to_json
      end
    else
      $stderr.puts "No SQL for select quiz attempt"
    end
  end
end

MatchQuizRecovery.new.run!
